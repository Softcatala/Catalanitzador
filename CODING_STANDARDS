This document documnent describes the Catalanitzador coding standards

--- Naming

* For Classes, interfaces, enums and structures use UpperCamelCase 

For example:

class SystemRestore

* For variables and variales we use LowerCamelCase 

For example:

int systemRestore

Prefixes:

- 'm_' to indicate member variable such as 'm_processes'
- 'g_' to indicate that is a global variable 'g_currentObject'

* For methods, if they are public we use UpperCamelCase and if they are private
or protected the prefix with '_' with LowerCamelCase

For example:

public:
		void FinishExecution(ExecutionProcess process);

protected:
		void _enumVersions(vector <wstring>& versions);



* For constants, we use UPPER case, for example:

#define APPLICATON_WEBSITE	L"http://catalanitzador.softcatala.org"

--- Declaring and initializing

* Declare the constants and macros at the beginning of the .cpp files.

* Initialize all arrays to a default value, specially initialize char and wchar_t arrays to 0. 
The compiler initializes automatically for us in debug mode but in release mode it doesn't. 
These is a common source of mistakes.

For example:

	char szTmpA[1024] = {0};
	wchar_t szTmpB[1024] = {0};

--- Namespaces

* You should avoid using namespace std in general because it can cause problems when using different libraries. 

For example:

	// <vector>
	namespace std
	{
	    template < class T, class Allocator = allocator<T> > 
	      class vector // STL vector
	   {
	        // ...
	   };
	}

	// "mylib.h"
	template < class T > 
	   class vector // my own vector
	   {
	        // ...
	   };

	// file.cpp
	#include <vector>
	#include "mylib.h"
	
	int main()
	{
	    vecor < int > x; // my own vector ( mylib.h doesn't define any namespace )
	
	    using namespace std;
	
	    vecor < int > y; // which vector? it's ambiguous now that bot vectors can be found in the global namespace
	}

You should particularly avoid using in header files as every other file which will #include them will get this issue.
Instead restrict to the specified symbols or use explicit namespace scope as follows:

For example:

	using std::cout;
	using std::vector; // as above, restricted to the specified symbols 
	cout << "blah blah";
	vector<int> v(10); 

or better:

	std::cout << "blah blah"; // explicit namespace scope
	std::vector<int> v(10); 
